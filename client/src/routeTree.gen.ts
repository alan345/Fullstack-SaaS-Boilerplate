/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UsersRouteImport } from './routes/users'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as SessionsRouteImport } from './routes/sessions'
import { Route as ProfileRouteImport } from './routes/profile'
import { Route as LoginRouteImport } from './routes/login'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as ChatRouteImport } from './routes/chat'
import { Route as BeersRouteImport } from './routes/beers'
import { Route as IndexRouteImport } from './routes/index'

const UsersRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const SessionsRoute = SessionsRouteImport.update({
  id: '/sessions',
  path: '/sessions',
  getParentRoute: () => rootRouteImport,
} as any)
const ProfileRoute = ProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRoute = ChatRouteImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => rootRouteImport,
} as any)
const BeersRoute = BeersRouteImport.update({
  id: '/beers',
  path: '/beers',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/beers': typeof BeersRoute
  '/chat': typeof ChatRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/sessions': typeof SessionsRoute
  '/signup': typeof SignupRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/beers': typeof BeersRoute
  '/chat': typeof ChatRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/sessions': typeof SessionsRoute
  '/signup': typeof SignupRoute
  '/users': typeof UsersRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/beers': typeof BeersRoute
  '/chat': typeof ChatRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/profile': typeof ProfileRoute
  '/sessions': typeof SessionsRoute
  '/signup': typeof SignupRoute
  '/users': typeof UsersRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/beers'
    | '/chat'
    | '/contact'
    | '/login'
    | '/profile'
    | '/sessions'
    | '/signup'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/beers'
    | '/chat'
    | '/contact'
    | '/login'
    | '/profile'
    | '/sessions'
    | '/signup'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/beers'
    | '/chat'
    | '/contact'
    | '/login'
    | '/profile'
    | '/sessions'
    | '/signup'
    | '/users'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BeersRoute: typeof BeersRoute
  ChatRoute: typeof ChatRoute
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
  ProfileRoute: typeof ProfileRoute
  SessionsRoute: typeof SessionsRoute
  SignupRoute: typeof SignupRoute
  UsersRoute: typeof UsersRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/sessions': {
      id: '/sessions'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof SessionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/profile': {
      id: '/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof ProfileRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat': {
      id: '/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/beers': {
      id: '/beers'
      path: '/beers'
      fullPath: '/beers'
      preLoaderRoute: typeof BeersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BeersRoute: BeersRoute,
  ChatRoute: ChatRoute,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
  ProfileRoute: ProfileRoute,
  SessionsRoute: SessionsRoute,
  SignupRoute: SignupRoute,
  UsersRoute: UsersRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
